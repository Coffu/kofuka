import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.fsm.storage.memory import MemoryStorage
import asyncpg
import asyncio
from flask import Flask
from threading import Thread

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
DATABASE_URL = os.getenv("DATABASE_URL")  # URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
PORT = int(os.getenv("PORT", 5000))

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

app = Flask(__name__)

db_pool = None  # –ü—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –ë–î

async def connect_db():
    global db_pool
    if db_pool is None:
        logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        db_pool = await asyncpg.create_pool(DATABASE_URL)
    return db_pool

async def delete_webhook():
    try:
        await bot.delete_webhook()
        logger.info("–í–µ–±—Ö—É–∫ –≤–∏–º–∫–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥ üìÖ")],
        [KeyboardButton(text="–£—á–Ω—ñ —É –≥—Ä—É–ø—ñ üë•")],
        [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ üë®‚Äçüè´")]
    ],
    resize_keyboard=True
)

# –°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—á–∞—Ç–∏ ü™Ñ")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """ –í—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ """
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É /start")
    await message.answer("–í—ñ—Ç–∞—é! –•–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ—á–∞—Ç–∏ ü™Ñ'.", reply_markup=start_keyboard)

@dp.message(lambda message: message.text == "–ü–æ—á–∞—Ç–∏ ü™Ñ")
async def start_registration(message: types.Message):
    """ –ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ """
    user_id = message.from_user.id
    db = await connect_db()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    user = await db.fetchrow("SELECT * FROM students WHERE user_id=$1", user_id)

    if user:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥—Ä—É–ø—É
        if user["group_id"]:
            await message.answer("–í—ñ—Ç–∞—é! –û—Å—å –≤–∞—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:", reply_markup=main_keyboard)
        else:
            # –Ø–∫—â–æ –≥—Ä—É–ø–∞ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ –≥—Ä—É–ø—É
            groups = await db.fetch("SELECT id, name FROM groups")
            if not groups:
                await message.answer("–£ —Å–∏—Å—Ç–µ–º—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø.")
                return

            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=group["name"])] for group in groups],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=keyboard)
        return
    else:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –∑–∞–ø–∏—Ç—É—î–º–æ —ñ–º'—è
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")

        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É —Ñ—ñ—á—É: —Å—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, —â–æ–± –∑–∞–ø–∏—Ç–∞—Ç–∏ –≥—Ä—É–ø—É –ø—ñ—Å–ª—è —ñ–º'—è
        await dp.message_handler(lambda message: True)(save_name_for_registration)

# –û–∫—Ä–µ–º–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ
async def save_name_for_registration(message: types.Message):
    """ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Ç–∞ –∑–∞–ø–∏—Ç –≥—Ä—É–ø–∏ """
    user_id = message.from_user.id
    user_name = message.text
    db = await connect_db()

    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    await db.execute("INSERT INTO students (user_id, name) VALUES ($1, $2)", user_id, user_name)
    await message.answer(f"–í–∞—à–µ —ñ–º'—è {user_name} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É.")

    # –ó–∞–ø–∏—Ç—É—î–º–æ –≥—Ä—É–ø—É
    groups = await db.fetch("SELECT id, name FROM groups")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=group["name"])] for group in groups],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=keyboard)

@dp.message()
async def handle_group_selection(message: types.Message):
    """ –í–∏–±—ñ—Ä –≥—Ä—É–ø–∏ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–µ–¥–µ —ñ–º'—è """
    user_id = message.from_user.id
    db = await connect_db()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    user = await db.fetchrow("SELECT * FROM students WHERE user_id=$1", user_id)

    if not user:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –≥—Ä—É–ø—É, –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –±–∞–∑—ñ
    group_name = message.text
    group = await db.fetchrow("SELECT id FROM groups WHERE name=$1", group_name)

    if not group:
        await message.answer("–¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ–º–∞—î. –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –≥—Ä—É–ø—É.")
        return

    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await db.execute("UPDATE students SET group_id=$1 WHERE user_id=$2", group["id"], user_id)
    
    # –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏ –Ω–∞–¥–∞—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –û—Å—å –≤–∞—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥ üìÖ")
async def my_schedule(message: types.Message):
    """ –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ """
    user_id = message.from_user.id
    db = await connect_db()
    student = await db.fetchrow("SELECT group_id FROM students WHERE user_id=$1", user_id)
    
    if not student or not student["group_id"]:
        await message.answer("–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ –≥—Ä—É–ø—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≥–ª—è–¥–æ–º —Ä–æ–∑–∫–ª–∞–¥—É.")
        return

    schedule = await db.fetch("SELECT day, subject, time, classroom FROM schedule WHERE group_id=$1", student["group_id"])
    if schedule:
        schedule_text = "\n".join([f"{row['day']} - {row['subject']} –æ {row['time']} –≤ {row['classroom']}" for row in schedule])
        await message.answer(f"–í–∞—à —Ä–æ–∑–∫–ª–∞–¥:\n{schedule_text}")
    else:
        await message.answer("–†–æ–∑–∫–ª–∞–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.")

@dp.message(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ üë®‚Äçüè´")
async def teacher_contacts(message: types.Message):
    """ –í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –¥–ª—è –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ """
    user_id = message.from_user.id
    db = await connect_db()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ group_id –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    student = await db.fetchrow("SELECT group_id FROM students WHERE user_id=$1", user_id)

    if not student or not student["group_id"]:
        await message.answer("–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ –≥—Ä—É–ø—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≥–ª—è–¥–æ–º –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ teachers
    teachers = await db.fetch("SELECT name, subject, email FROM teachers WHERE group_id=$1", student["group_id"])
    
    if teachers:
        contacts_text = "\n".join([f"{teacher['name']} - {teacher['subject']} - {teacher['email']}" for teacher in teachers])
        await message.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –¥–ª—è –≤–∞—à–æ—ó –≥—Ä—É–ø–∏:\n{contacts_text}")
    else:
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –¥–ª—è –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")

@dp.message(lambda message: message.text == "–£—á–Ω—ñ —É –≥—Ä—É–ø—ñ üë•")
async def group_students(message: types.Message):
    """ –í–∏–≤–µ–¥–µ–Ω–Ω—è —É—á–Ω—ñ–≤, —è–∫—ñ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ —Ç—ñ—î—ó –∂ –≥—Ä—É–ø–∏, —â–æ –π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á """
    user_id = message.from_user.id
    db = await connect_db()

    # –û—Ç—Ä–∏–º—É—î–º–æ group_id –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    student = await db.fetchrow("SELECT group_id FROM students WHERE user_id=$1", user_id)

    if not student or not student["group_id"]:
        await message.answer("–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ –≥—Ä—É–ø—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≥–ª—è–¥–æ–º —É—á–Ω—ñ–≤.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤, —è–∫—ñ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ —Ü—ñ—î—ó –∂ –≥—Ä—É–ø–∏
    students_in_group = await db.fetch("SELECT name FROM students WHERE group_id=$1", student["group_id"])
    
    if students_in_group:
        students_list = "\n".join([student["name"] for student in students_in_group])
        await message.answer(f"–£—á–Ω—ñ —É –≤–∞—à—ñ–π –≥—Ä—É–ø—ñ:\n{students_list}")
    else:
        await message.answer("–£—á–Ω—ñ —É –≤–∞—à—ñ–π –≥—Ä—É–ø—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")

@app.route("/")
def keep_alive():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

def flask_thread():
    """ –ó–∞–ø—É—Å–∫ Flask —É –ø–æ—Ç–æ—Ü—ñ """
    app.run(host="0.0.0.0", port=PORT)

async def main():
    await delete_webhook()
    Thread(target=flask_thread).start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
