import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncpg

# –£–∫–∞–∂—ñ—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω Telegram
API_TOKEN = "7703843605:AAGq7-1tAvlBfNGKdtLHwTboO0HRYN3x4gk"

PORT = os.getenv('PORT', default=8000)
# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_CONFIG = {
    'user': 'pr_tg_user',
    'password': 'qKgOhgMjLsfAB1UtWtqHFSNcI7TM1PDT',
    'database': 'pr_tg',
    'host': 'dpg-cugmd1bv2p9s73cktkog-a',
    'port': 5432
}

async def create_db_pool():
    return await asyncpg.create_pool(**DB_CONFIG)

db_pool = None

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("–†–æ–∑–∫–ª–∞–¥"), KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤—á–∏—Ç–µ–ª—ñ–≤"))
main_menu.add(KeyboardButton("–ù–æ–≤–∏–Ω–∏"))

def group_selection_keyboard(groups):
    keyboard = InlineKeyboardMarkup()
    for group in groups:
        keyboard.add(InlineKeyboardButton(group, callback_data=f"select_group:{group}"))
    return keyboard

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    async with db_pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", message.from_user.id)
        if not user:
            await message.answer("–í—ñ—Ç–∞—î–º–æ! –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
            return
    await message.answer("–í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ –ø–æ–º—ñ—á–Ω–∏–∫—É –∫–æ–ª–µ–¥–∂—É!", reply_markup=main_menu)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler()
async def register_user(message: types.Message):
    async with db_pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", message.from_user.id)
        if user:
            return

        await conn.execute("INSERT INTO users (telegram_id, name) VALUES ($1, $2)", message.from_user.id, message.text)

        groups = await conn.fetch("SELECT group_name FROM groups")
        group_names = [group['group_name'] for group in groups]
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=group_selection_keyboard(group_names))

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('select_group'))
async def select_group(callback_query: types.CallbackQuery):
    group_name = callback_query.data.split(':')[1]
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE users SET group_name = $1 WHERE telegram_id = $2", group_name, callback_query.from_user.id)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu)

# –†–æ–∑–∫–ª–∞–¥
@dp.message_handler(lambda message: message.text == "–†–æ–∑–∫–ª–∞–¥")
async def show_schedule(message: types.Message):
    async with db_pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", message.from_user.id)
        if not user or not user['group_name']:
            await message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–±–æ –Ω–µ –æ–±—Ä–∞–ª–∏ –≥—Ä—É–ø—É.")
            return

        schedule = await conn.fetch("SELECT day, subject, time FROM schedule WHERE group_name = $1 ORDER BY day, time", user['group_name'])
        if not schedule:
            await message.answer("–†–æ–∑–∫–ª–∞–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.")
            return

        response = "–†–æ–∑–∫–ª–∞–¥:\n"
        for record in schedule:
            response += f"{record['day']} {record['time']}: {record['subject']}\n"

        await message.answer(response)

# –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤—á–∏—Ç–µ–ª—ñ–≤
@dp.message_handler(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤—á–∏—Ç–µ–ª—ñ–≤")
async def show_teachers(message: types.Message):
    async with db_pool.acquire() as conn:
        teachers = await conn.fetch("SELECT name, contact FROM teachers")
        if not teachers:
            await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è.")
            return

        response = "–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤—á–∏—Ç–µ–ª—ñ–≤:\n"
        for teacher in teachers:
            response += f"{teacher['name']}: {teacher['contact']}\n"

        await message.answer(response)

# –ù–æ–≤–∏–Ω–∏
@dp.message_handler(lambda message: message.text == "–ù–æ–≤–∏–Ω–∏")
async def show_announcements(message: types.Message):
    async with db_pool.acquire() as conn:
        announcements = await conn.fetch("SELECT title, content FROM announcements ORDER BY id DESC LIMIT 5")
        if not announcements:
            await message.answer("–ù–æ–≤–∏–Ω –ø–æ–∫–∏ –Ω–µ–º–∞—î.")
            return

        response = "–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n"
        for news in announcements:
            response += f"{news['title']}: {news['content']}\n"

        await message.answer(response)

# –ê–¥–º—ñ–Ω-—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª
ADMIN_PASSWORD = "123456"
admin_users = set()  # –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ–≤

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
admin_keyboard.add("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
admin_keyboard.add("üìÜ –î–æ–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥", "üì∞ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É")
admin_keyboard.add("üö™ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")

@dp.message_handler(commands=['admin'])
async def admin_login(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:")

@dp.message_handler(lambda msg: msg.text == ADMIN_PASSWORD)
async def admin_access_granted(message: types.Message):
    admin_users.add(message.from_user.id)
    await message.answer("‚úÖ –í–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)

@dp.message_handler(lambda msg: msg.text == "üö™ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")
async def admin_logout(message: types.Message):
    admin_users.discard(message.from_user.id)
    await message.answer("‚ùå –í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
                                             "üìÜ –î–æ–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥", "üì∞ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É"])
async def admin_actions(message: types.Message):
    if message.from_user.id not in admin_users:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ!")
        return

    if message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
        await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n`–Ü–º'—è, –†–æ–ª—å (student/teacher), –ì—Ä—É–ø–∞ (–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤)`")
    elif message.text == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
        await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:")
    elif message.text == "üìÜ –î–æ–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥":
        await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n`–ì—Ä—É–ø–∞, –î–∞—Ç–∞, –ß–∞—Å, –ü—Ä–µ–¥–º–µ—Ç, –í–∏–∫–ª–∞–¥–∞—á, –ê—É–¥–∏—Ç–æ—Ä—ñ—è`")
    elif message.text == "üì∞ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É":
        await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–∏–Ω–∏, –∞ –ø–æ—Ç—ñ–º —ó—ó —Ç–µ–∫—Å—Ç.")

if __name__ == '__main__':
    async def on_startup(dp):
        global db_pool
        db_pool = await create_db_pool()
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞.")

    async def on_shutdown(dp):
        await db_pool.close()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞.")

    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)


