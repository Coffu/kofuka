import os
import json
import logging
import psycopg2
from flask import Flask, request
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import sessionmaker, declarative_base, relationship
from telegram import Update, ReplyKeyboardMarkup, Bot
from telegram.ext import CommandHandler, CallbackContext, MessageHandler, Filters, Dispatcher

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL") + "?client_encoding=utf8"

Base = declarative_base()
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É–≤–∞–Ω–Ω—è UTF-8
try:
    with engine.connect() as conn:
        conn.execute("SET client_encoding TO 'UTF8'")  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–∞ UTF-8
        logger.info("–£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}")

class Schedule(Base):
    __tablename__ = 'schedules'
    id = Column(Integer, primary_key=True)
    group_id = Column(Integer, ForeignKey('groups.id'))
    day = Column(String, nullable=False)
    time = Column(String, nullable=False)
    
    group = relationship("Group", back_populates="schedules")  # –í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏

class Group(Base):
    __tablename__ = 'groups'
    id = Column(Integer, primary_key=True)
    name = Column(String, unique=True, nullable=False)
    students = relationship("Student", back_populates="group")
    schedules = relationship("Schedule", back_populates="group")  # –í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ Schedule

class Student(Base):
    __tablename__ = 'students'
    id = Column(Integer, primary_key=True)
    tg_id = Column(String, unique=True, nullable=False)
    name = Column(String, nullable=False)
    group_id = Column(Integer, ForeignKey('groups.id'))
    group = relationship("Group", back_populates="students")

class Teacher(Base):
    __tablename__ = 'teachers'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    subject = Column(String, nullable=False)
    contact = Column(String)

Base.metadata.create_all(engine)

app = Flask(__name__)
bot = Bot(token=TOKEN)  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞
bot.set_webhook(url=f"https://kofuka-bk1t.onrender.com/{TOKEN}")

dispatcher = Dispatcher(bot, None, workers=4)

def start(update: Update, context: CallbackContext):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %s", update.message.from_user.id)
    tg_id = str(update.message.from_user.id)
    user = session.query(Student).filter_by(tg_id=tg_id).first()

    if user:
        update.message.reply_text(f"üëã –í—ñ—Ç–∞—é, {user.name}! –í–∏ –≤ –≥—Ä—É–ø—ñ {user.group.name}.", reply_markup=menu_keyboard())
    else:
        groups = session.query(Group).all()
        group_names = [[g.name] for g in groups]
        update.message.reply_text("‚ùó –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É:", reply_markup=ReplyKeyboardMarkup(group_names, one_time_keyboard=True))

def register(update: Update, context: CallbackContext):
    logger.info("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %s", update.message.from_user.id)
    tg_id = str(update.message.from_user.id)
    group_name = update.message.text
    group = session.query(Group).filter_by(name=group_name).first()
    
    if group:
        student = Student(tg_id=tg_id, name=update.message.from_user.full_name, group=group)
        session.add(student)
        session.commit()
        update.message.reply_text(f"‚úÖ –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –≥—Ä—É–ø—ñ {group.name}", reply_markup=menu_keyboard())
    else:
        update.message.reply_text("‚ùå –¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É üëá.")

def menu_keyboard():
    return ReplyKeyboardMarkup([[ 
        "üìÖ –†–æ–∑–∫–ª–∞–¥", "üë®‚Äçüè´ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤" 
    ], [
        "üë• –°—Ç—É–¥–µ–Ω—Ç–∏ –≥—Ä—É–ø–∏"
    ]], resize_keyboard=True)

def schedule(update: Update, context: CallbackContext):
    logger.info("–ó–∞–ø–∏—Ç —Ä–æ–∑–∫–ª–∞–¥—É –≤—ñ–¥ %s", update.message.from_user.id)
    tg_id = str(update.message.from_user.id)
    user = session.query(Student).filter_by(tg_id=tg_id).first()
    
    if user:
        group_schedule = session.query(Schedule).filter_by(group_id=user.group_id).all()
        
        if group_schedule:
            schedule_text = "\n".join([f"üóìÔ∏è {s.day} - {s.time}" for s in group_schedule])
            update.message.reply_text(f"üìÖ –†–æ–∑–∫–ª–∞–¥ –¥–ª—è –≥—Ä—É–ø–∏ {user.group.name}:\n{schedule_text}")
        else:
            update.message.reply_text("‚è≥ –†–æ–∑–∫–ª–∞–¥ –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ.")
    else:
        update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —É –≥—Ä—É–ø—ñ üë•.")


def contacts(update: Update, context: CallbackContext):
    logger.info("–ó–∞–ø–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –≤—ñ–¥ %s", update.message.from_user.id)
    teachers = session.query(Teacher).all()
    if teachers:
        contacts_list = "\n".join([f"üë®‚Äçüè´ {t.name} ({t.subject}): {t.contact}" for t in teachers])
        update.message.reply_text(f"üìö –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n{contacts_list}")
    else:
        update.message.reply_text("‚è≥ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –ø–æ–∫–∏ —â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")

def students(update: Update, context: CallbackContext):
    logger.info("–ó–∞–ø–∏—Ç —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≥—Ä—É–ø–∏ –≤—ñ–¥ %s", update.message.from_user.id)
    tg_id = str(update.message.from_user.id)
    user = session.query(Student).filter_by(tg_id=tg_id).first()
    if user:
        group_students = session.query(Student).filter_by(group_id=user.group_id).all()
        student_names = "\n".join([f"üë©‚Äçüéì {s.name}" for s in group_students])
        update.message.reply_text(f"üë• –í–∞—à—ñ –æ–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∏:\n{student_names}")
    else:
        update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —É –≥—Ä—É–ø—ñ üë•.")

def handle_message(update: Update, context: CallbackContext):
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %s", update.message.text)
    commands = {"üìÖ –†–æ–∑–∫–ª–∞–¥": schedule, "üë®‚Äçüè´ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤": contacts, "üë• –°—Ç—É–¥–µ–Ω—Ç–∏ –≥—Ä—É–ø–∏": students}
    if update.message.text in commands:
        commands[update.message.text](update, context)
    else:
        register(update, context)

@app.after_request
def after_request(response):
    response.headers["Content-Type"] = "application/json; charset=utf-8"
    return response

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ Telegram: %s", request.get_json())
    update = Update.de_json(request.get_json(), bot)
    dispatcher.process_update(update)
    return "OK"

dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Flask")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
