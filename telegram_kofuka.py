import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.fsm.storage.memory import MemoryStorage
import asyncpg
import asyncio
from flask import Flask
from threading import Thread

# üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")  
DATABASE_URL = os.getenv("DATABASE_URL")  
PORT = int(os.getenv("PORT", 5000))

# üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

app = Flask(__name__)

db_pool = None  # –ü—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –ë–î

async def connect_db():
    """–§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    global db_pool
    if db_pool is None:
        logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        db_pool = await asyncpg.create_pool(DATABASE_URL)
    return db_pool

async def delete_webhook():
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞."""
    try:
        await bot.delete_webhook()
        logger.info("–í–µ–±—Ö—É–∫ –≤–∏–º–∫–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")

# üîπ –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥ üìÖ")],
        [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ üë®‚Äçüè´")],
        [KeyboardButton(text="–£—á–Ω—ñ —É –≥—Ä—É–ø—ñ üë•")]
    ],
    resize_keyboard=True
)

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—á–∞—Ç–∏ ü™Ñ")]
    ],
    resize_keyboard=True
)

# üîπ –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–í—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø–æ—á–∞—Ç–∏"""
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É /start")
    await message.answer("–í—ñ—Ç–∞—é! –•–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ—á–∞—Ç–∏ ü™Ñ'.", reply_markup=start_keyboard)

@dp.message(lambda message: message.text == "–ü–æ—á–∞—Ç–∏ ü™Ñ")
async def start_registration(message: types.Message):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = message.from_user.id
    db = await connect_db()
    user = await db.fetchrow("SELECT * FROM students WHERE user_id=$1", user_id)

    if user:
        await message.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!", reply_markup=main_keyboard)
    else:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:")

@dp.message(lambda message: len(message.text.split()) >= 2)
async def handle_registration(message: types.Message):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = message.from_user.id
    db = await connect_db()

    user = await db.fetchrow("SELECT * FROM students WHERE user_id=$1", user_id)
    if user:
        await message.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!", reply_markup=main_keyboard)
        return

    full_name = message.text.strip()
    await db.execute("INSERT INTO students (user_id, name) VALUES ($1, $2)", user_id, full_name)

    groups = await db.fetch("SELECT name FROM groups")
    if not groups:
        await message.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø.")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=group["name"])] for group in groups],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=keyboard)

@dp.message(lambda message: message.text in ["–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥ üìÖ", "–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ üë®‚Äçüè´", "–£—á–Ω—ñ —É –≥—Ä—É–ø—ñ üë•"])
async def handle_menu_selection(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    user_id = message.from_user.id
    db = await connect_db()

    if message.text == "–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥ üìÖ":
        student = await db.fetchrow("SELECT group_id FROM students WHERE user_id=$1", user_id)
        if not student:
            await message.answer("–í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ.")
            return

        schedule = await db.fetch("SELECT day, subject, time FROM schedule WHERE group_id=$1", student["group_id"])
        if schedule:
            schedule_text = "\n".join([f"{row['day']} - {row['subject']} –æ {row['time']}" for row in schedule])
            await message.answer(f"–í–∞—à —Ä–æ–∑–∫–ª–∞–¥:\n{schedule_text}")
        else:
            await message.answer("–†–æ–∑–∫–ª–∞–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.")

    elif message.text == "–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ üë®‚Äçüè´":
        teachers = await db.fetch("SELECT name, phone FROM teachers")
        if teachers:
            contacts_text = "\n".join([f"{row['name']}: {row['phone']}" for row in teachers])
            await message.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n{contacts_text}")
        else:
            await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")

    elif message.text == "–£—á–Ω—ñ —É –≥—Ä—É–ø—ñ üë•":
        student = await db.fetchrow("SELECT group_id FROM students WHERE user_id=$1", user_id)
        if not student:
            await message.answer("–í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ.")
            return

        students = await db.fetch("SELECT name FROM students WHERE group_id=$1", student["group_id"])
        if students:
            students_text = "\n".join([row["name"] for row in students])
            await message.answer(f"–£—á–Ω—ñ —É –≤–∞—à—ñ–π –≥—Ä—É–ø—ñ:\n{students_text}")
        else:
            await message.answer("–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≤–∞—à—ñ–π –≥—Ä—É–ø—ñ.")

@app.route("/")
def keep_alive():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

def flask_thread():
    """–ó–∞–ø—É—Å–∫ Flask —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    app.run(host="0.0.0.0", port=PORT)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    await delete_webhook()
    Thread(target=flask_thread).start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
