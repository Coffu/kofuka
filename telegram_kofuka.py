import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
import asyncpg
import asyncio
from flask import Flask
from threading import Thread

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
DATABASE_URL = os.getenv("DATABASE_URL")  # URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
PORT = int(os.getenv("PORT", 5000))

app = Flask(__name__)

logger.info(f"DATABASE_URL: {DATABASE_URL}")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

db_pool = None  # –ü—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –ë–î

async def connect_db():
    global db_pool
    if db_pool is None:
        logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        db_pool = await asyncpg.create_pool(DATABASE_URL)
    return db_pool

async def delete_webhook():
    try:
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.info(f"–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {webhook_info.url}")
            await bot.delete_webhook()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥ üìÖ")],
        [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ üë®‚Äçüè´")],
        [KeyboardButton(text="–£—á–Ω—ñ —É –≥—Ä—É–ø—ñ üë•")]
    ],
    resize_keyboard=True
)

# –°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—á–∞—Ç–∏ ü™Ñ")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """ –í—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø–æ—á–∞—Ç–∏ """
    try:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É /start")
        await message.answer("–í—ñ—Ç–∞—é! –•–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ—á–∞—Ç–∏ ü™Ñ'.", reply_markup=start_keyboard)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /start: {e}")

@dp.message(lambda message: message.text == "–ü–æ—á–∞—Ç–∏ ü™Ñ")
async def start_registration(message: types.Message):
    """ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ """
    try:
        user_id = message.from_user.id
        db = await connect_db()
        user = await db.fetchrow("SELECT * FROM students WHERE user_id=$1", user_id)

        if user:
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π")
            await message.answer("–í—ñ—Ç–∞—é! –û—Å—å –≤–∞—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:", reply_markup=main_keyboard)
        else:
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ó–∞–ø–∏—Ç —ñ–º–µ–Ω—ñ.")
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ü–æ—á–∞—Ç–∏ ü™Ñ': {e}")

@dp.message()
async def handle_registration(message: types.Message):
    """ –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ —Ç–∞ –≤–∏–±—ñ—Ä –≥—Ä—É–ø–∏ """
    try:
        user_id = message.from_user.id
        db = await connect_db()

        user = await db.fetchrow("SELECT * FROM students WHERE user_id=$1", user_id)
        if user:
            await message.answer("–í—ñ—Ç–∞—é! –û—Å—å –≤–∞—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:", reply_markup=main_keyboard)
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ
        name_parts = message.text.split()
        if len(name_parts) < 2:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤).")
            return

        full_name = " ".join(name_parts)
        await db.execute("INSERT INTO students (user_id, name) VALUES ($1, $2)", user_id, full_name)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä—É–ø
        groups = await db.fetch("SELECT name FROM groups")
        if not groups:
            await message.answer("–£ —Å–∏—Å—Ç–µ–º—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø.")
            return

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=group["name"])] for group in groups],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=keyboard)

@dp.message()
async def handle_group_selection(message: types.Message):
    """ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏ """
    try:
        user_id = message.from_user.id
        db = await connect_db()

        group = await db.fetchrow("SELECT id FROM groups WHERE name=$1", message.text)
        if not group:
            await message.answer("–¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ–º–∞—î. –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –≥—Ä—É–ø—É.")
            return

        await db.execute("UPDATE students SET group_id=$1 WHERE user_id=$2", group["id"], user_id)
        await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –û—Å—å –≤–∞—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:", reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏: {e}")

@dp.message(lambda message: message.text == "–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥ üìÖ")
async def my_schedule(message: types.Message):
    """ –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ """
    user_id = message.from_user.id
    db = await connect_db()

    student = await db.fetchrow("SELECT group_id FROM students WHERE user_id=$1", user_id)
    if not student:
        await message.answer("–í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ.")
        return

    schedule = await db.fetch("SELECT day, subject, time FROM schedule WHERE group_id=$1", student["group_id"])
    schedule_text = "\n".join([f"{row['day']} - {row['subject']} –æ {row['time']}" for row in schedule]) if schedule else "–†–æ–∑–∫–ª–∞–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."
    await message.answer(f"–í–∞—à —Ä–æ–∑–∫–ª–∞–¥:\n{schedule_text}")

@dp.message(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ üë®‚Äçüè´")
async def teacher_contacts(message: types.Message):
    """ –í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ """
    db = await connect_db()
    teachers = await db.fetch("SELECT name, phone FROM teachers")
    contacts_text = "\n".join([f"{row['name']}: {row['phone']}" for row in teachers]) if teachers else "–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ."
    await message.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n{contacts_text}")

@dp.message(lambda message: message.text == "–£—á–Ω—ñ —É –≥—Ä—É–ø—ñ üë•")
async def students_in_group(message: types.Message):
    """ –í–∏–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ """
    user_id = message.from_user.id
    db = await connect_db()

    student = await db.fetchrow("SELECT group_id FROM students WHERE user_id=$1", user_id)
    students = await db.fetch("SELECT name FROM students WHERE group_id=$1", student["group_id"]) if student else []
    students_text = "\n".join([row["name"] for row in students]) if students else "–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."
    await message.answer(f"–£—á–Ω—ñ —É –≤–∞—à—ñ–π –≥—Ä—É–ø—ñ:\n{students_text}")
