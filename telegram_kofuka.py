import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import asyncpg
import asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–∞ URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –ë–î
db_pool = None

async def connect_db():
    global db_pool
    if db_pool is None:
        logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        db_pool = await asyncpg.create_pool(DATABASE_URL)
    return db_pool

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—á–∞—Ç–∏ ü™Ñ")]
    ],
    resize_keyboard=True
)

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """ –í—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é """
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É /start")
    await message.answer(
        "–í—ñ—Ç–∞—é! –•–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ—á–∞—Ç–∏ ü™Ñ'.", reply_markup=start_keyboard)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—á–∞—Ç–∏ ü™Ñ"
@dp.message(lambda message: message.text == "–ü–æ—á–∞—Ç–∏ ü™Ñ")
async def start_registration(message: types.Message):
    """ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, —ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î """
    user_id = message.from_user.id
    db = await connect_db()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    user = await db.fetchrow("SELECT * FROM students WHERE user_id=$1", user_id)

    if user:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î, –≤—ñ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await message.answer("–í—ñ—Ç–∞—é! –û—Å—å –≤–∞—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:")
        # –ú–æ–∂–Ω–∞ —Ç—É—Ç –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    else:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∑–±–æ—Ä—É —ñ–º–µ–Ω—ñ
        await dp.message_handler(lambda message: True)(save_name_for_registration)

# –û–∫—Ä–µ–º–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def save_name_for_registration(message: types.Message):
    """ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö """
    user_id = message.from_user.id
    user_name = message.text
    db = await connect_db()

    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    await db.execute("INSERT INTO students (user_id, name) VALUES ($1, $2)", user_id, user_name)
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ –≥—Ä—É–ø—É
    await message.answer(f"–í–∞—à–µ —ñ–º'—è {user_name} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É.")
    
    # –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏, –∞–ª–µ —Ü–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –ø–æ—Ç—ñ–º
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø, —è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤–µ—Ä—Å—ñ—è—Ö
    # –î–ª—è —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏

    # –í–∞—à–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏ (–≤–∂–µ –ø—ñ–∑–Ω—ñ—à–µ –¥–æ–¥–∞—î–º–æ)
    # groups = await db.fetch("SELECT id, name FROM groups")
    # keyboard = ReplyKeyboardMarkup(
    #     keyboard=[[KeyboardButton(text=group["name"])] for group in groups],
    #     resize_keyboard=True,
    #     one_time_keyboard=True
    # )
    # await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
