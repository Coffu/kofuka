import os
import json
import logging
import psycopg2
from flask import Flask, request
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import sessionmaker, declarative_base, relationship
from telegram import Update, ReplyKeyboardMarkup, Bot
from telegram.ext import CommandHandler, CallbackContext, MessageHandler, Filters, Dispatcher

app = Flask(__name__)

bot.set_webhook(url=f"https://kofuka-bk1t.onrender.com{TOKEN}")
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

Base = declarative_base()
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
try:
    with engine.connect() as conn:
        logger.info("–£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}")

class Group(Base):
    __tablename__ = 'groups'
    id = Column(Integer, primary_key=True)
    name = Column(String, unique=True, nullable=False)
    students = relationship("Student", back_populates="group")

class Student(Base):
    __tablename__ = 'students'
    id = Column(Integer, primary_key=True)
    tg_id = Column(String, unique=True, nullable=False)
    name = Column(String, nullable=False)
    group_id = Column(Integer, ForeignKey('groups.id'))
    group = relationship("Group", back_populates="students")

class Teacher(Base):
    __tablename__ = 'teachers'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    subject = Column(String, nullable=False)
    contact = Column(String)

Base.metadata.create_all(engine)

app = Flask(__name__)
bot = Bot(token=TOKEN)
dispatcher = Dispatcher(bot, None, workers=4)

def start(update: Update, context: CallbackContext):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %s", update.message.from_user.id)
    tg_id = str(update.message.from_user.id)
    user = session.query(Student).filter_by(tg_id=tg_id).first()
    
    if user:
        update.message.reply_text(f"–í—ñ—Ç–∞—é, {user.name}! –í–∏ –≤ –≥—Ä—É–ø—ñ {user.group.name}.", reply_markup=menu_keyboard())
    else:
        groups = session.query(Group).all()
        group_names = [[g.name] for g in groups]
        update.message.reply_text("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É:", reply_markup=ReplyKeyboardMarkup(group_names, one_time_keyboard=True))

def register(update: Update, context: CallbackContext):
    logger.info("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %s", update.message.from_user.id)
    tg_id = str(update.message.from_user.id)
    group_name = update.message.text
    group = session.query(Group).filter_by(name=group_name).first()
    
    if group:
        student = Student(tg_id=tg_id, name=update.message.from_user.full_name, group=group)
        session.add(student)
        session.commit()
        update.message.reply_text(f"–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –≥—Ä—É–ø—ñ {group.name}", reply_markup=menu_keyboard())
    else:
        update.message.reply_text("–¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")

def menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üìÖ –†–æ–∑–∫–ª–∞–¥", "üë®‚Äçüè´ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤"],
        ["üë• –°—Ç—É–¥–µ–Ω—Ç–∏ –≥—Ä—É–ø–∏"]
    ], resize_keyboard=True)

def schedule(update: Update, context: CallbackContext):
    logger.info("–ó–∞–ø–∏—Ç —Ä–æ–∑–∫–ª–∞–¥—É –≤—ñ–¥ %s", update.message.from_user.id)
    tg_id = str(update.message.from_user.id)
    user = session.query(Student).filter_by(tg_id=tg_id).first()
    if user:
        update.message.reply_text(f"–¢—É—Ç –±—É–¥–µ —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –≥—Ä—É–ø–∏ {user.group.name}.")

def contacts(update: Update, context: CallbackContext):
    logger.info("–ó–∞–ø–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –≤—ñ–¥ %s", update.message.from_user.id)
    teachers = session.query(Teacher).all()
    contacts_list = "\n".join([f"{t.name} ({t.subject}): {t.contact}" for t in teachers])
    update.message.reply_text(f"–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n{contacts_list}")

def students(update: Update, context: CallbackContext):
    logger.info("–ó–∞–ø–∏—Ç —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≥—Ä—É–ø–∏ –≤—ñ–¥ %s", update.message.from_user.id)
    tg_id = str(update.message.from_user.id)
    user = session.query(Student).filter_by(tg_id=tg_id).first()
    if user:
        group_students = session.query(Student).filter_by(group_id=user.group_id).all()
        student_names = "\n".join([s.name for s in group_students])
        update.message.reply_text(f"–í–∞—à—ñ –æ–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∏:\n{student_names}")

def handle_message(update: Update, context: CallbackContext):
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %s", update.message.text)
    commands = {"üìÖ –†–æ–∑–∫–ª–∞–¥": schedule, "üë®‚Äçüè´ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤": contacts, "üë• –°—Ç—É–¥–µ–Ω—Ç–∏ –≥—Ä—É–ø–∏": students}
    if update.message.text in commands:
        commands[update.message.text](update, context)
    else:
        register(update, context)

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ Telegram: %s", request.get_json())
    update = Update.de_json(request.get_json(), bot)
    dispatcher.process_update(update)
    return "OK"

dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Flask")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
