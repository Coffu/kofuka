import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
import asyncpg
import asyncio
from flask import Flask
from threading import Thread

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")  # –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
DATABASE_URL = os.getenv("DATABASE_URL")  # URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
PORT = int(os.getenv("PORT", 5000))

app = Flask(__name__)

logger.info(f"DATABASE_URL: {DATABASE_URL}")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

db_pool = None  # –ì–ª–æ–±–∞–ª—å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î

async def connect_db():
    global db_pool
    if db_pool is None:
        logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        db_pool = await asyncpg.create_pool(DATABASE_URL)
    return db_pool

async def delete_webhook():
    try:
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.info(f"–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {webhook_info.url}")
            await bot.delete_webhook()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—á–∞—Ç–∏ ü™Ñ")]
    ],
    resize_keyboard=True
)

student_panel_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥ üìÖ")],
        [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ üë®‚Äçüè´")],
        [KeyboardButton(text="–£—á–Ω—ñ —É –≥—Ä—É–ø—ñ üë•")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    try:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É /start")
        await message.answer("–í—ñ—Ç–∞—é! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ—á–∞—Ç–∏ ü™Ñ' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.", reply_markup=main_menu)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /start: {e}")

@dp.message(lambda message: message.text == "–ü–æ—á–∞—Ç–∏ ü™Ñ")
async def start_registration(message: types.Message):
    try:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ü–æ—á–∞—Ç–∏ ü™Ñ'")
        db = await connect_db()
        user = await db.fetchrow("SELECT * FROM students WHERE user_id=$1", message.from_user.id)
        if user:
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π")
            await message.answer("–í—ñ—Ç–∞—é! –û—Å—å –≤–∞—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:", reply_markup=student_panel_menu)
        else:
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ó–∞–ø–∏—Ç —ñ–º–µ–Ω—ñ —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–∞.")
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")

@dp.message()
async def handle_message(message: types.Message):
    try:
        user_id = message.from_user.id
        db = await connect_db()

        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤: {message.text}")

        student = await db.fetchrow("SELECT * FROM students WHERE user_id=$1", user_id)
        if student:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –ø–∞–Ω–µ–ª—å —É—á–Ω—è
            await message.answer("–í—ñ—Ç–∞—é! –û—Å—å –≤–∞—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:", reply_markup=student_panel_menu)
            return

        name_parts = message.text.split()
        if len(name_parts) < 2:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.")
            return

        full_name = " ".join(name_parts)
        await db.execute("INSERT INTO students (user_id, name) VALUES ($1, $2)", user_id, full_name)

        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —è–∫ {full_name}")

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        groups = await db.fetch("SELECT name FROM groups")
        if not groups:
            await message.answer("–£ —Å–∏—Å—Ç–µ–º—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø.")
            return

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=group["name"])] for group in groups],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–Ω–µ–ª—ñ —É—á–Ω—è
@dp.message(lambda message: message.text == "–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥ üìÖ")
async def show_schedule(message: types.Message):
    try:
        db = await connect_db()
        user_id = message.from_user.id
        student = await db.fetchrow("SELECT group_id FROM students WHERE user_id=$1", user_id)
        if not student:
            await message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
            return
        group_id = student["group_id"]
        schedule = await db.fetch("SELECT * FROM schedule WHERE group_id=$1", group_id)
        if not schedule:
            await message.answer("–†–æ–∑–∫–ª–∞–¥ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ.")
            return

        response = "\n".join([f"{item['subject']} - {item['time']}" for item in schedule])
        await message.answer(f"–í–∞—à —Ä–æ–∑–∫–ª–∞–¥:\n{response}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —Ä–æ–∑–∫–ª–∞–¥—É: {e}")

@dp.message(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ üë®‚Äçüè´")
async def show_teachers(message: types.Message):
    try:
        db = await connect_db()
        teachers = await db.fetch("SELECT name FROM teachers")
        if not teachers:
            await message.answer("–£ —Å–∏—Å—Ç–µ–º—ñ –Ω–µ–º–∞—î –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤.")
            return

        response = "\n".join([f"üë®‚Äçüè´ {teacher['name']}" for teacher in teachers])
        await message.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n{response}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤: {e}")

@dp.message(lambda message: message.text == "–£—á–Ω—ñ —É –≥—Ä—É–ø—ñ üë•")
async def show_groupmates(message: types.Message):
    try:
        db = await connect_db()
        user_id = message.from_user.id
        student = await db.fetchrow("SELECT group_id FROM students WHERE user_id=$1", user_id)
        if not student:
            await message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
            return
        group_id = student["group_id"]
        groupmates = await db.fetch("SELECT name FROM students WHERE group_id=$1", group_id)
        if not groupmates:
            await message.answer("–í –≥—Ä—É–ø—ñ –Ω–µ–º–∞—î —ñ–Ω—à–∏—Ö —É—á–Ω—ñ–≤.")
            return

        response = "\n".join([f"üë• {groupmate['name']}" for groupmate in groupmates])
        await message.answer(f"–£—á–Ω—ñ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏:\n{response}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –æ–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫—ñ–≤: {e}")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    await delete_webhook()  # –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –≤–µ–±—Ö—É–∫
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling...")
    await connect_db()
    await dp.start_polling(bot)

def run_flask():
    logger.info("–ó–∞–ø—É—Å–∫ Flask-–¥–æ–¥–∞—Ç–∫–∞ —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ")
    app.run(host="0.0.0.0", port=PORT)

@app.route("/")
def index():
    logger.info("–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ—Å—Ç—É–ø–Ω–∞")
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

if __name__ == "__main__":
    flask_thread = Thread(target=run_flask)
    flask_thread.start()
    asyncio.run(main())
