import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncpg

# –£–∫–∞–∂—ñ—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω Telegram
API_TOKEN = "7703843605:AAHmrXmeDGC9NybirXn9IlhMbqSDAtXx1OY"
ADMIN_PASSWORD = "123456"

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_CONFIG = {
    'user': 'pr_tg_user',
    'password': 'qKgOhgMjLsfAB1UtWtqHFSNcI7TM1PDT',
    'database': 'pr_tg',
    'host': 'dpg-cugmd1bv2p9s73cktkog-a',
    'port': 5432
}

async def create_db_pool():
    return await asyncpg.create_pool(**DB_CONFIG)

db_pool = None

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
menu_buttons = ReplyKeyboardMarkup(resize_keyboard=True)
menu_buttons.add(KeyboardButton("–†–æ–∑–∫–ª–∞–¥"))
menu_buttons.add(KeyboardButton("–ù–æ–≤–∏–Ω–∏"))
menu_buttons.add(KeyboardButton("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"))

admin_users = set()

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ –ø–æ–º—ñ—á–Ω–∏–∫—É –∫–æ–ª–µ–¥–∂—É!", reply_markup=menu_buttons)

# –í—Ö—ñ–¥ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å
@dp.message_handler(lambda message: message.text == "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_login(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:")

@dp.message_handler(lambda msg: msg.text == ADMIN_PASSWORD)
async def admin_access_granted(message: types.Message):
    admin_users.add(message.from_user.id)
    admin_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    admin_keyboard.add("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    admin_keyboard.add("üìÜ –î–æ–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥", "üì∞ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É")
    admin_keyboard.add("üö™ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")
    await message.answer("‚úÖ –í–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)

@dp.message_handler(lambda msg: msg.text == "üö™ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")
async def admin_logout(message: types.Message):
    admin_users.discard(message.from_user.id)
    await message.answer("‚ùå –í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.", reply_markup=menu_buttons)

# –†–æ–∑–∫–ª–∞–¥
@dp.message_handler(lambda message: message.text == "–†–æ–∑–∫–ª–∞–¥")
async def get_schedule(message: types.Message):
    user_id = message.from_user.id
    async with db_pool.acquire() as conn:
        user = await conn.fetchrow("SELECT role, group_name FROM users WHERE telegram_id = $1", user_id)
        if not user:
            await message.answer("–í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        role = user['role']
        if role == 'student':
            group_name = user['group_name']
            schedule = await conn.fetch("SELECT date, time, subject, teacher, classroom FROM schedule WHERE group_name = $1 ORDER BY date, time", group_name)
        elif role == 'teacher':
            schedule = await conn.fetch("SELECT date, time, subject, group_name, classroom FROM schedule WHERE teacher = (SELECT full_name FROM teachers WHERE telegram_id = $1) ORDER BY date, time", user_id)
        else:
            await message.answer("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —ñ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤.")
            return

        if not schedule:
            await message.answer("–†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        response = "–í–∞—à —Ä–æ–∑–∫–ª–∞–¥:\n\n"
        for entry in schedule:
            response += f"–î–∞—Ç–∞: {entry['date']}, –ß–∞—Å: {entry['time']}, –ü—Ä–µ–¥–º–µ—Ç: {entry['subject']}, –í–∏–∫–ª–∞–¥–∞—á: {entry.get('teacher', '-')}, –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {entry['classroom']}\n"
        await message.answer(response)

# –ù–æ–≤–∏–Ω–∏
@dp.message_handler(lambda message: message.text == "–ù–æ–≤–∏–Ω–∏")
async def get_announcements(message: types.Message):
    async with db_pool.acquire() as conn:
        announcements = await conn.fetch("SELECT title, message, created_at FROM announcements ORDER BY created_at DESC LIMIT 5")
        if not announcements:
            await message.answer("–ù–æ–≤–∏–Ω –Ω–µ–º–∞—î.")
            return

        response = "–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n\n"
        for announcement in announcements:
            response += f"{announcement['title']} ({announcement['created_at']}):\n{announcement['message']}\n\n"
        await message.answer(response)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
@dp.message_handler(commands=['add_news'])
async def add_announcement(message: types.Message):
    if message.from_user.id not in admin_users:
        await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –¢–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏")

    @dp.message_handler()
    async def save_announcement(news_message: types.Message):
        try:
            title, message_text = map(str.strip, news_message.text.split('|', 1))
        except ValueError:
            await news_message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –¢–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏")
            return

        async with db_pool.acquire() as conn:
            await conn.execute("INSERT INTO announcements (title, message) VALUES ($1, $2)", title, message_text)
        await news_message.answer("–ù–æ–≤–∏–Ω—É –¥–æ–¥–∞–Ω–æ!")

if __name__ == '__main__':
    async def on_startup(dp):
        global db_pool
        db_pool = await create_db_pool()
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞.")

    async def on_shutdown(dp):
        await db_pool.close()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞.")

    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)
