import os
import json
import logging
import psycopg2
from flask import Flask, request
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import sessionmaker, declarative_base, relationship
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters, Dispatcher

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
Base = declarative_base()
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

# –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
class Group(Base):
    __tablename__ = 'groups'
    id = Column(Integer, primary_key=True)
    name = Column(String, unique=True, nullable=False)
    students = relationship("Student", back_populates="group")

class Student(Base):
    __tablename__ = 'students'
    id = Column(Integer, primary_key=True)
    tg_id = Column(String, unique=True, nullable=False)
    name = Column(String, nullable=False)
    group_id = Column(Integer, ForeignKey('groups.id'))
    group = relationship("Group", back_populates="students")

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
Base.metadata.create_all(engine)

# –°—Ç–≤–æ—Ä—é—î–º–æ Flask –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫
app = Flask(__name__)

def start(update: Update, context: CallbackContext):
    tg_id = str(update.message.from_user.id)
    user = session.query(Student).filter_by(tg_id=tg_id).first()
    
    if user:
        update.message.reply_text(f"–í—ñ—Ç–∞—é, {user.name}! –í–∏ –≤ –≥—Ä—É–ø—ñ {user.group.name}.", reply_markup=menu_keyboard())
    else:
        groups = session.query(Group).all()
        group_names = [[g.name] for g in groups]
        update.message.reply_text("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É:", reply_markup=ReplyKeyboardMarkup(group_names, one_time_keyboard=True))

def register(update: Update, context: CallbackContext):
    tg_id = str(update.message.from_user.id)
    group_name = update.message.text
    group = session.query(Group).filter_by(name=group_name).first()
    
    if group:
        student = Student(tg_id=tg_id, name=update.message.from_user.full_name, group=group)
        session.add(student)
        session.commit()
        update.message.reply_text(f"–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –≥—Ä—É–ø—ñ {group.name}", reply_markup=menu_keyboard())
    else:
        update.message.reply_text("–¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")

def menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üìÖ –†–æ–∑–∫–ª–∞–¥", "üë®‚Äçüè´ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤"],
        ["üë• –°—Ç—É–¥–µ–Ω—Ç–∏ –≥—Ä—É–ø–∏"]
    ], resize_keyboard=True)

def schedule(update: Update, context: CallbackContext):
    update.message.reply_text("–¢—É—Ç –±—É–¥–µ —Ä–æ–∑–∫–ª–∞–¥ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏.")

def contacts(update: Update, context: CallbackContext):
    update.message.reply_text("–¢—É—Ç –±—É–¥—É—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤.")

def students(update: Update, context: CallbackContext):
    tg_id = str(update.message.from_user.id)
    user = session.query(Student).filter_by(tg_id=tg_id).first()
    if user:
        group_students = session.query(Student).filter_by(group_id=user.group_id).all()
        student_names = "\n".join([s.name for s in group_students])
        update.message.reply_text(f"–í–∞—à—ñ –æ–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∏:\n{student_names}")

def handle_message(update: Update, context: CallbackContext):
    if update.message.text in ["üìÖ –†–æ–∑–∫–ª–∞–¥", "üë®‚Äçüè´ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤", "üë• –°—Ç—É–¥–µ–Ω—Ç–∏ –≥—Ä—É–ø–∏"]:
        commands = {"üìÖ –†–æ–∑–∫–ª–∞–¥": schedule, "üë®‚Äçüè´ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤": contacts, "üë• –°—Ç—É–¥–µ–Ω—Ç–∏ –≥—Ä—É–ø–∏": students}
        commands[update.message.text](update, context)
    else:
        register(update, context)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(), bot)
    dispatcher.process_update(update)
    return "OK"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Updater(TOKEN, use_context=True).bot
dispatcher = Dispatcher(bot, None, workers=0)
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
