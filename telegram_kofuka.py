import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
import asyncpg
import asyncio
from flask import Flask, request
from threading import Thread

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")  # –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
DATABASE_URL = os.getenv("DATABASE_URL")  # URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
PORT = int(os.getenv("PORT", 5000))

app = Flask(__name__)

logger.info(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞ –∞–¥—Ä–µ—Å–æ—é: {DATABASE_URL}")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

db_pool = None  # –ì–ª–æ–±–∞–ª—å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
async def connect_db():
    global db_pool
    try:
        if db_pool is None:
            logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
            db_pool = await asyncpg.create_pool(DATABASE_URL)
        return db_pool
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        return None

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥")],
        [KeyboardButton(text="üìö –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤")],
        [KeyboardButton(text="üë• –£—á–Ω—ñ —É –≥—Ä—É–ø—ñ")]
    ],
    resize_keyboard=True
)

start_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üöÄ –ü–æ—á–∞—Ç–∏")]],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —Ä–æ–∑–ø–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º")
    await message.answer("üëã –í—ñ—Ç–∞—é! –Ø –≤–∞—à –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –±–æ—Ç. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üöÄ –ü–æ—á–∞—Ç–∏', —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.", reply_markup=start_menu)

@dp.message(lambda message: message.text == "üöÄ –ü–æ—á–∞—Ç–∏")
async def start_registration(message: types.Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ü–æ—á–∞—Ç–∏'")
    db = await connect_db()
    if db is None:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        return

    user_id = message.from_user.id
    student = await db.fetchrow("SELECT name FROM students WHERE user_id=$1", user_id)
    
    if student:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: {student['name']}")
        await message.answer(f"üéâ –í—ñ—Ç–∞—é, {student['name']}! –û–±–∏—Ä–∞–π—Ç–µ –¥—ñ—é –∑ –º–µ–Ω—é.", reply_markup=main_menu)
    else:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –∑–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ")
        await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")

@dp.message()
async def handle_registration_or_menu(message: types.Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤: {message.text}")
    db = await connect_db()
    if db is None:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        return

    user_id = message.from_user.id
    student = await db.fetchrow("SELECT * FROM students WHERE user_id=$1", user_id)
    
    if not student:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è...")
        name_parts = message.text.split()
        if len(name_parts) < 2:
            await message.answer("‚ö† –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.")
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö (—Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–µ —ñ–º'—è –∞–±–æ –ø–æ—Ä–æ–∂–Ω—å–æ): {message.text}")
            return
        
        full_name = " ".join(name_parts)
        await db.execute("INSERT INTO students (user_id, name) VALUES ($1, $2)", user_id, full_name)
        
        groups = await db.fetch("SELECT name FROM groups")
        if not groups:
            await message.answer("‚ùå –£ —Å–∏—Å—Ç–µ–º—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø.")
            logger.warning("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø –¥–ª—è –≤–∏–±–æ—Ä—É.")
            return
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=group["name"]) for group in groups]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("üìå –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É:", reply_markup=keyboard)
    elif await db.fetchval("SELECT id FROM groups WHERE name=$1", message.text):
        group_id = await db.fetchval("SELECT id FROM groups WHERE name=$1", message.text)
        await db.execute("UPDATE students SET group_id=$1 WHERE user_id=$2", group_id, user_id)
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –≥—Ä—É–ø—ñ {message.text}")
        await message.answer("‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –≥—Ä—É–ø—ñ!", reply_markup=main_menu)
    elif message.text == "üìÖ –ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥":
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø–∏—Ç—É—î —Ä–æ–∑–∫–ª–∞–¥")
        schedule = await db.fetch("SELECT subject, time FROM schedule WHERE group_id=$1", student["group_id"])
        if schedule:
            schedule_text = "\n".join([f"‚è∞ {row['time']} - {row['subject']}" for row in schedule])
            await message.answer(f"üìñ –í–∞—à —Ä–æ–∑–∫–ª–∞–¥:\n{schedule_text}")
        else:
            await message.answer("‚ùå –†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î —Ä–æ–∑–∫–ª–∞–¥—É.")
    elif message.text == "üìö –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤":
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø–∏—Ç—É—î –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤")
        contacts = await db.fetch("SELECT name, phone FROM teachers")
        contacts_text = "\n".join([f"üë®‚Äçüè´ {row['name']}: {row['phone']}" for row in contacts])
        await message.answer(f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n{contacts_text}")
    elif message.text == "üë• –£—á–Ω—ñ —É –≥—Ä—É–ø—ñ":
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø–∏—Ç—É—î —Å–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤ —É –≥—Ä—É–ø—ñ")
        students = await db.fetch("SELECT name FROM students WHERE group_id=$1", student["group_id"])
        students_text = "\n".join([f"üë§ {row['name']}" for row in students])
        await message.answer(f"üë®‚Äçüéì –£—á–Ω—ñ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏:\n{students_text}")
    else:
        await message.answer("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.")
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ –Ω–µ–≤—ñ–¥–æ–º—É –∫–æ–º–∞–Ω–¥—É: {message.text}")

@app.route("/")
def index():
    logger.info("–ë–æ—Ç –ø—Ä–∞—Ü—é—î!")
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run(host="0.0.0.0", port=PORT)
